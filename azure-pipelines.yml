# Terraform pipeline

trigger:
  - master

variables:
  tf_version: "latest" # what version of terraform should be used
  tf_state_rg: "blogpost-tfstate-rg" # name of the resource group to create/use for the terraform state file
  tz_state_location: "uksouth" # location of the resource group to create/use for the terraform state file
  tf_state_sa_name: "blogposttfstatesa" # name of of the storage account to create/use for the terraform state file
  tf_state_container_name: "tfstate" # name of of the container to create/use for the terraform state file
  tf_state_tags: ("env=blogpost-terraform-devops-pipeline" "deployedBy=devops") # tags for the resources above which support tagging
  tf_environment: "dev" # enviroment name, used for the statefile name

pool:
  vmImage: "ubuntu-latest"

stages:
  # Run Terrascan, upload results and halt if there any problems found
  ######################################################################

  - stage: "runTerrascan"
    displayName: "Run Terrascan"
    jobs:
      - job: "runTerrascan"
        displayName: "Download, run and publish results of Terrascan scan"
        steps:
          - bash: |
              docker pull accurics/terrascan
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Pull > Terrascan"

          - bash: |
              echo $(docker run --rm -t -v $(pwd):/iac -w /iac accurics/terrascan scan -o junit-xml) > Terrascan-Report.xml
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Run > Terrascan"

          - task: PublishTestResults@2
            displayName: "Publish > Terrascan scan results"
            inputs:
              testRunTitle: "Terrascan Results"
              failTaskOnFailedTests: true
              testResultsFormat: "JUnit"
              testResultsFiles: "Terrascan-Report.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)"

  # Check the Statefile Azure Storage Account exists
  ######################################################################

  - stage: "checkStatefile"
    displayName: "Configure Terraform Statefile Storage Account"
    jobs:
      - job: "runTerrascan"
        displayName: "Create/Check the Terraform Statefile Azure Storage Account"
        steps:
          - task: AzureCLI@2
            displayName: "Create/Check > Terraform Statefile Azure Storage Account"
            inputs:
              azureSubscription: "$(SUBSCRIPTION_NAME)"
              addSpnToEnvironment: true
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                TAGS=$(tf_state_tags)
                az group create --name $(tf_state_rg) --location $(tz_state_location) --tags "${TAGS[@]}"
                az storage account create --resource-group $(tf_state_rg) --name $(tf_state_sa_name) --sku Standard_GRS --encryption-services blob --tags "${TAGS[@]}"
                ACCOUNT_KEY=$(az storage account keys list --resource-group $(tf_state_rg) --account-name $(tf_state_sa_name) --query [0].value -o tsv)
                az storage container create --name $(tf_state_container_name) --account-name $(tf_state_sa_name) --account-key $ACCOUNT_KEY
                echo "##vso[task.setvariable variable=tf_state_sa_key]$ACCOUNT_KEY"

  # Check the Statefile Azure Storage Account exists
  ######################################################################

  - stage: "runTerraform"
    displayName: "Download and run Terraform"
    jobs:
      - job: "runTerrascan"
        displayName: "Download and run Terraform"
        steps:
          - task: TerraformInstaller@0
            displayName: "Install > terraform"
            inputs:
              terraformVersion: "$(tf_version)"

          - task: TerraformCLI@0
            displayName: "Run > terraform init"
            inputs:
              command: "init"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              backendType: "azurerm"
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"

          - task: TerraformCLI@0
            displayName: "Run > terraform plan"
            inputs:
              command: "plan"
              environmentServiceNameAzureRM: "$(SUBSCRIPTION_NAME)"
              publishPlanResults: "PlanResults"

          - task: TerraformCLI@0
            displayName: "Run > terraform apply"
            inputs:
              command: "apply"
              environmentServiceNameAzureRM: "$(SUBSCRIPTION_NAME)"
